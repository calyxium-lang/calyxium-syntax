{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "calyxium",
	"patterns": [
		{
			"include": "#err"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#primitives"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"err": {
			"patterns": [
				{
					"name": "invalid.deprecated",
					"match": "[0-9]+([A-Za-z_]+|[A-Za-z_]+[A-Za-z0-9_]*)"
				},
				{
					"name": "invalid.deprecated",
					"match": "rust|zura|https://www.rust-lang.org/|TheDevConnor|https://github.com/TheDevConnor/Zura-Transpiled|https://github.com/TheDevConnor|https://zuralang.co/|https://zura-lang.thedevconnor.repl.co/"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.calyxium",
					"match": "([A-Za-z]+[A-Za-z0-9_]*)--"
				},
				{
					"name": "comment.line.documentation.calyxium",
					"match": "-- \\$.*$"
				},
				{
					"name": "comment.line.double-dash.calyxium",
					"match": "--.*$"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.logical.calyxium",
					"match": "(\\!|&&|\\|\\|)"
				},
				{
					"name": "keyword.operator.comparison.calyxium",
					"match": "(==|!=|<=|>=|<|>)"
				},
				{
					"name": "keyword.operator.arithmetic.calyxium",
					"match": "(\\*\\*|\\+\\+|\\+=|-=|\\*=|/=|\\+|-|\\*|/|%)"
				},
				{
					"name": "keyword.operator.assignment.calyxium",
					"match": "(=)"
				},
				{
					"name": "keyword.operator.bitwise.calyxium",
					"match": "(&|\\||\\^|~|`|\\$)"
				},
				{
					"name": "keyword.operator.bitshift.calyxium",
					"match": "(<<=|>>=|<<|>>|>>>)"
				},
				{
					"name": "keyword.operator.bitwise.assignment.calyxium",
					"match": "(&=|\\|=|\\^=|`=|\\$=|<<=|>>=)"
				},
				{
					"name": "keyword.operator.match.calyxium",
					"match": "(->)"
				},
				{
					"name": "keyword.operator.pipeline.calyxium",
					"match": "(\\|)"
				}
			]
		},
		"numbers": {
			"name": "constant.numeric",
			"match": "\\b(0b[01_]+|0x[0-9a-fA-F_]+|\\d[\\d_]*(\\.\\d[\\d_]*)?([eE][+-]?\\d+)?)([fFdD]?)\\b"
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.calyxium",
					"match": "\\b(rec|if|then|else|let|use|with|for|return|match|enum|mod)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.calyxium",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.calyxium",
					"match": "\\\\."
				}
			]
		},
		"constants": {
			"name": "constant.language.calyxium",
			"match": "\\b(true|false)\\b"
		},
		"primitives": {
			"name": "storage.type.primitive.calyxium",
			"match": "\\b(int|float|string|bool|byte)\\b"
		},
		"functions": {
			"patterns": [
				{
					"name": "support.function",
					"match": "((print|println|to_float|to_int|to_string|to_bytes|length|input|assert)(\\(|)|[A-Za-z]+[A-Za-z0-9_$]*\\()"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "support.variable",
					"match": ""
				}
			]
		}
	},
	"scopeName": "source.calyxium"
}